- name: set iri variables
  set_fact:
    iri_workdir: "{{ iri_basedir }}/target"
  tags: always

- name: set variables centos
  set_fact:
    systemd_dir: /usr/lib/systemd/system
    config_dir: /etc/sysconfig
  when: ansible_distribution == 'CentOS'
  tags: always

- name: set variables ubuntu
  set_fact:
    systemd_dir: /etc/systemd/system
    config_dir: /etc/default
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  tags:
    - nbctl_config
    - scripts

- name: allow IPv4 forwarding in kernel
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    sysctl_set: yes
    state: present
    reload: yes

- name: auto memory settings block
  block:

    - name: set memory limit factor for memory larger than 10240m
      set_fact:
        iri_java_mem: 8192m
        iri_init_java_mem: 2048m
        iri_java_heap_mem: 2048m
      when: ansible_memtotal_mb|int > 10240

    - name: set memory limit for java-iri for RAM up to 10240m
      set_fact:
        iri_java_mem: "{{ (ansible_memtotal_mb|int * 0.7)|round|int }}m"
        iri_init_java_mem: "{{ (ansible_memtotal_mb|int * 0.2)|round|int }}m"
        iri_java_heap_mem: "{{ (ansible_memtotal_mb|int * 0.2)|round|int }}m"
      when: ansible_memtotal_mb|int <= 10240

  when: memory_autoset is defined and memory_autoset|bool
  tags:
    - mem_override

- name: add user to run iri as
  user:
    name: "{{ iri_username }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ iri_basedir }}"
  tags:
    - iri_user

- name: get iri user uid
  shell: "echo -n $(id -u {{ iri_username }})"
  changed_when: false
  register: iri_uid
  tags:
    - iri_create_container

- name: delete iri data basedir
  block:
    - name: stop iri
      systemd:
        name: iri.service
        state: stopped
      ignore_errors: yes

    - name: remove basedir
      file:
        path: "{{ iri_basedir }}"
        state: absent
  when: remove_iri_basedir is defined and remove_iri_basedir

- name: ensure iri basedir ownership and permissions
  file:
    path: "{{ iri_basedir }}"
    state: directory
    mode: 0700
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"

- name: ensure iri workdir ownership and permissions
  file:
    path: "{{ iri_workdir }}"
    state: directory
    mode: 0700
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"

- name: ensure iri config dir exists
  file:
    path: "{{ iri_configdir }}"
    state: directory
    mode: 0700
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"

- name: install scripts
  block:

    - set_fact:
        system_settings_locale: "{{ add_locale | default('en_US.UTF-8') }}"

    - name: generate required locale Ubuntu/Debian
      locale_gen:
        name: "{{ system_settings_locale }}"
        state: present
      ignore_errors: yes
      tags: gen_locale
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: check if locale exists
      shell: "/usr/bin/locale -a | grep -i {{ system_settings_locale | regex_replace('-', '') | quote }}"
      register: found_locale
      changed_when: no
      failed_when: no
      when: ansible_distribution == 'CentOS'

    - name: create locale
      command: "localedef -i {{ system_settings_locale | regex_replace('(.*)\\..*', '\\1') | quote }} -f {{ system_settings_locale | regex_replace('.*\\.(.*)', '\\1') | quote }} {{ system_settings_locale | quote }}"
      ignore_errors: yes
      when:
        - ansible_distribution == 'CentOS'
        - found_locale.rc != 0

    - name: copy utility scripts
      copy:
        src: "files/{{ item }}"
        dest: "/usr/bin/{{ item }}"
        mode: 0755
      with_items:
        - nbctl
        - reattach
        - iric

    - name: download ps_mem
      get_url:
        url: https://raw.githubusercontent.com/pixelb/ps_mem/master/ps_mem.py
        dest: /usr/bin/ps_mem
        mode: 0755
      ignore_errors: yes

    - name: download iritop requirements
      get_url:
        url: https://raw.githubusercontent.com/maeck70/iritop/master/requirements.txt
        dest: /tmp/iritop-requirements.txt
        force: yes
      ignore_errors: yes

    - name: download iritop
      get_url:
        url: https://raw.githubusercontent.com/maeck70/iritop/master/iritop.py
        dest: /usr/bin/iritop
        mode: 0755
        force: yes
      ignore_errors: yes

    - name: install iritop requirements
      pip:
        requirements: /tmp/iritop-requirements.txt
      ignore_errors: yes

  tags:
    - scripts

- name: config default ~/.nbctl
  copy:
    dest: "{{ ansible_env.HOME }}/.nbctl"
    content: "api_version: {{ iri_version }}\nhost: http://127.0.0.1:{{ iri_mgmt_api_port if iri_net_name is defined else iri_api_port }}\nfile: {{ config_dir }}/iri\n"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  tags:
    - nbctl_config
    - scripts

- name: configure ~/.iritop
  copy:
    dest: "{{ ansible_env.HOME }}/.iritop"
    content: "node: http://127.0.0.1:{{ iri_mgmt_api_port if iri_net_name is defined else iri_api_port }}"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  tags:
    - iritop_config
    - scripts

- name: copy iri environment config file
  template:
    src: templates/iri.sysconfig.j2
    dest: "{{ config_dir }}/iri"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  notify:
    - restart iri

- name: copy iri systemd file
  template:
    src: templates/iri.service.j2
    dest: "{{ systemd_dir }}/iri.service"
  notify:
    - restart iri

- name: copy iri.ini config file
  template:
    src: templates/iri.ini.j2
    dest: "{{ iri_configdir }}/iri.ini"
    owner: "{{ iri_username }}"
    group: "{{ iri_username }}"
    force: "{{ overwrite | default('no') }}"
    backup: yes
  notify:
    - restart iri

- name: create a link for iri ini configuration file
  file:
    src: "{{ iri_configdir }}/iri.ini"
    dest: "{{ iri_basedir }}/iri.ini"
    state: link

- name: check docker firewall rules
  block:

    - name: check docker in iptables
      shell: "iptables-save | grep -q DOCKER"
      failed_when: False
      changed_when: False
      register: docker_iptables

    - name: restart docker to apply iptables chain
      systemd:
        name: docker
        state: restarted
      when: docker_iptables.rc == 1

- name: Create a network for iri
  docker_network:
    name: "{{ iri_net_name }}"
    driver: bridge
    driver_options:
      com.docker.network.bridge.enable_ip_masquerade: 'true'
      com.docker.network.bridge.host_binding_ipv4: '0.0.0.0'
      com.docker.network.bridge.enable_icc: 'true'
      com.docker.network.bridge.name: 'br-iri0'
  when: iri_net_name is defined
  tags:
    - iri_network

- import_tasks: image-iri.yml
  tags:
    - iri_docker_image

- name: flush handlers
  meta: flush_handlers

- name: ensure iri started and enabled
  systemd:
    daemon_reload: true
    name: iri.service
    state: started
    enabled: true
