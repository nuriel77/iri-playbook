#!/usr/bin/env python
import argparse
import tempfile
import logging
import hashlib
import socket
import yaml
import json
import sys
import re
import os
from shutil import copyfile
from os.path import expanduser
from ipaddress import ip_address
from argparse import RawTextHelpFormatter


try:
    import urllib3
except ImportError:
    sys.stderr.write("Missing python urllib3? " +
                     "Install via 'pip install urllib3'"
                     "\n")
    sys.exit(1)


__VERSION__ = '0.2.1'

LOG = logging.getLogger(__name__)
DEFAULT_API_VERSION = '1.6'
DEFAULT_HOST = 'http://127.0.0.1:14265'

"""Script to list, add or remove neighbors
   from IRI API and the configuration file
   source: https://github.com/nuriel77/iri-playbook
   Copyright (c) 2019 Nuriel Shem-Tov
"""

def parse_args():

    parser = argparse.ArgumentParser(
        formatter_class=RawTextHelpFormatter,
        description='Add or remove full node neighbors.',
        epilog='Example: nbctl -a -n'
               ' tcp://1.2.3.4:12345 -n tcp://4.3.2.1:4321'
               ' -f /etc/default/iri\n'
               '--host and --api-version can be placed in a file in the home directory ~/.nbctl:\n'
               'api_version: 1.4.2.4\n'
               'host: http://127.0.0.1:12345')

    parser.add_argument('--debug', '-d', action='store_true',
                        default=False,
                        help='Set debug on')

    parser.add_argument('--neighbors', '-n',
                        action='append',
                        help='Neighbors to process. Can be specified'
                             ' multiple times.')

    parser.add_argument('--remove-reverse', '-x', action='store_true',
                        default=False,
                        help='Attempt to remove reverse DNS')

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('--remove', '-r', action='store_true',
                       help='Removes neighbors')

    group.add_argument('--add', '-a', action='store_true',
                       help='Add neighbors')

    group.add_argument('--list', '-l', action='store_true',
                       help='List neighbors')

    parser.add_argument('--file', '-f',
                        help='Configuration file to update')

    parser.add_argument('--host', '-i',
                        help='IRI API endpoint. Default: %s' %
                        DEFAULT_HOST)

    parser.add_argument('--timeout', '-t',
                        help='Timeout. Default: %(default)s',
                        type=int, default=5)

    parser.add_argument('--version', '-V', action='version',
                        version='nbctl %s' % __VERSION__)

    parser.add_argument('--api-version', '-v',
                        help='IRI API Version. Default: %s' %
                        DEFAULT_API_VERSION)

    return parser


def run():

    try:
        parser = parse_args()
        args = parser.parse_args()
    except Exception as e:
        sys.stderr.write("Failed to parse arguments: %s\n" % e)
        sys.exit(1)

    set_logger(debug=args.debug)

    if args.add:
        command = 'addNeighbors'
    elif args.remove:
        command = 'removeNeighbors'
    elif args.list:
        command = 'getNeighbors'
    else:
        sys.stderr.write("Error: You need to specify a command:\n\n")
        parser.print_help()
        sys.exit(1)

    if (args.add or args.remove) and args.neighbors is None:
        sys.stderr.write("Error: Argument --neighbors/-n is required.\n")
        sys.exit(1)

    # Append a reverse DNS if IPv4 as IRI tends to register
    # an IPv4's reverse address as an additional neighbor
    reversed_dns_list = []
    if args.remove and args.remove_reverse:
        for neighbor in args.neighbors:
            LOG.debug("Check reverse DNS for %s" % neighbor)
            reverse = get_reverse(neighbor)
            if reverse is not None:
                reversed_dns_list.append(reverse)

    if len(reversed_dns_list):
        args.neighbors.extend(reversed_dns_list)

    # Prepare body
    to_send = json.dumps({
        'command': command,
        'uris': args.neighbors
    })

    # Set defaults
    local_config = get_homedir_nbctl()
    if args.api_version is None and 'api_version' in local_config:
        args.api_version = local_config['api_version']
    elif args.api_version is None:
        args.api_version = DEFAULT_API_VERSION

    if args.host is None and 'host' in local_config:
        args.host = local_config['host']
    elif args.host is None:
        args.host = DEFAULT_HOST

    # Prepare headers
    headers = {
        'content-type': 'application/json',
        'X-IOTA-API-Version': args.api_version
    }

    http = urllib3.PoolManager()
    # Send to IRI API
    try:
        response = http.request('POST',
                                args.host,
                                body=to_send,
                                timeout=args.timeout,
                                headers=headers)
    except Exception as e:
        LOG.error("Unknown error: '%s'" % e)
        sys.exit(1)

    if response.status != 200:
        LOG.error("Error response from node: code %d, response: '%s'" %
                  (response.status, response.data.decode('utf-8')))
        sys.exit(1)

    json_data = json.loads(response.data.decode('utf-8'))
    print(json.dumps(json_data, indent=4, sort_keys=True))

    if args.file is None:
        sys.exit()

    tmpfile = tempfile.NamedTemporaryFile(delete=False)
    neighbors_regex = r'^IRI_NEIGHBORS=.*$|^NEIGHBORS =.*$'

    # Update config file
    try:
        with open(args.file ,"r") as orig:
            lines = orig.readlines()
            for line in lines:
                if re.match(neighbors_regex, line) is None:
                    tmpfile.write(line.encode())
                else:
                    line_to_write = process_neighbors_line(command,
                                                           line.rstrip(),
                                                           args.neighbors) + '\n'
                    tmpfile.write(line_to_write.encode())

    except IOError as e:
        LOG.error('Operation failed: %s' % e.strerror)
        sys.exit(1)

    tmpfile.close()

    # Check if file changed, and copy if true
    newfile = hashlib.md5(open(tmpfile.name, 'rb').read()).hexdigest()
    irifile = hashlib.md5(open(args.file, 'rb').read()).hexdigest()
    if newfile != irifile:
        copyfile(args.file, args.file + '.nbctl.bak')
        copyfile(tmpfile.name, args.file)
        LOG.debug("Backed up configutaion file in %s" %
                  args.file + '.nbctl.bak')
    else:
        LOG.debug("No changes in configuration file")


def set_logger(debug=False):
    if debug is True:
        LOG.setLevel(logging.DEBUG)
    else:
        LOG.setLevel(logging.INFO)

    ch = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter('%(levelname)s: %(message)s')
    ch.setFormatter(formatter)
    LOG.addHandler(ch)
    LOG.debug('Debug on')


def get_reverse(neighbor):
    # Extract address
    m = re.search(r"^((?:tcp))://\[{0,1}(.+?)\]{0,1}:(?!.*:)([0-9]+)",
                  neighbor)

    if m is None:
        LOG.debug("No match in get_reverse() for %s" % neighbor)
        return None

    try:
        ip = ip_address(u''+m.group(2))
    except TypeError:
        LOG.debug("Not a valid IP address in get_reverse(), skip ...")
        return None
    except ValueError:
        LOG.debug("Not a valid IP address in get_reverse(), skip ...")
        return None

    try:
        reversed_dns = socket.gethostbyaddr(str(ip))
    except socket.herror as e:
        return None

    if len(reversed_dns):
        new_address = "%s://%s:%s" % (m.group(1), reversed_dns[0], m.group(3))
        LOG.debug("Got reverse for %s: %s" % (neighbor, new_address))
        return new_address

def process_neighbors_line(command, line, neighbors_to_process):
    file_type = 'sysconfig'

    # Check neighbor line valid, get existing neighbors
    if re.match(r"""^IRI_NEIGHBORS=["']["']""", line):
        neighbors = []
    else:
        m = re.search(r"""^IRI_NEIGHBORS=["'](.+?)["']""", line)
        # If no results from above, check if ini config type
        if m is None:
            file_type = 'ini'
            if re.match(r"""^NEIGHBORS =[ ]*$""", line):
                neighbors = []
            else:
                m = re.search(r"""^NEIGHBORS = (.*)$""", line)
                if m is None:
                    LOG.error("Neighbors line seems invalid: '%s'" % line)
                    sys.exit(1)
                neighbors = m.group(1).split(" ")
        else:
            # Store neighbor URIs in a list
            neighbors = m.group(1).split(" ")

    # Validate syntax in existing file and provided neighbors list
    if validate_uris(neighbors) is False:
        LOG.error("Error detected in neighbors syntax in config file\n")
        sys.exit(1)
    elif validate_uris(neighbors_to_process) is False:
        LOG.error("Error detected in user provided neighbors syntax\n")
        sys.exit(1)

    if command == 'removeNeighbors':
        for neighbor_to_process in neighbors_to_process:
            neighbors = remove_neighbor_from_list(neighbors, neighbor_to_process)
    elif command == 'addNeighbors':
        for neighbor_to_process in neighbors_to_process:
            if neighbor_to_process not in neighbors:
                neighbors.append(neighbor_to_process)

    if file_type == 'ini':
        return 'NEIGHBORS = %s' % " ".join(neighbors)
    else:
        return 'IRI_NEIGHBORS="%s"' % " ".join(neighbors)


def remove_neighbor_from_list(neighbors, neighbor_to_process):
   return [value for value in neighbors if value != neighbor_to_process]


def validate_uris(neighbors):

    for neighbor in neighbors:

        # Check valid neighbor URI
        m = re.search(r"^(?:tcp)://\[{0,1}(.+?)\]{0,1}:(?!.*:)([0-9]+)",
                      neighbor)
        if m is None:
            LOG.warning("Invalid neighbor syntax: '%s'\n" % neighbor)
            return False

        # Check valid port range
        if int(m.group(2)) > 65535 or int(m.group(2)) < 1:
            LOG.warning("Neighbor '%s' has invalid port range"
                        " (1-65535)\n" % neighbor)
            return False

        # Check neighbor address is valid hostname or IP
        if valid_address(m.group(1), neighbor) is not True:
            LOG.warning("Address '%s' in URI '%s' seems invalid\n" %
                        (m.group(1), neighbor))
            return False


def is_valid_hostname(hostname):
    if re.match('^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', hostname):
        # Failed IP check, so this is an invalid IP
        return False

    if len(hostname) > 255:
        return False
    if hostname[-1] == ".":
        hostname = hostname[:-1]
    allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?<!-)$", re.IGNORECASE)
    return all(allowed.match(x) for x in hostname.split("."))


def valid_address(address, uri):
    try:
        ip = ip_address(u''+address)
        # If IPv6, check valid brackets in URI
        if ip.version == 6 and re.match(r'^.*/\[.*\]:.*', uri) is None:
            LOG.warning("IPv6 address '%s' missing one or more"
                        " square brackets.\nE.g.:"
                        " tcp://[xx:xx:xx:xx]:15600\n" % uri)
            return False
    except ValueError:
        # Check if valid hostname
        return is_valid_hostname(address)
    return True


def get_homedir_nbctl():
    home = expanduser("~")
    config_file = home + '/.nbctl'
    if not os.path.exists(config_file):
        return {}

    with open(config_file, 'r') as stream:
        try:
            data = yaml.safe_load(stream)
        except yaml.YAMLError as e:
            LOG.error("Failed to read '%s': %s" %
                      (config_file, e))

    if data is None:
        return {}

    return data


if __name__ == "__main__":
    run()
