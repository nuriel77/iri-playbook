- name: add user to run haproxy as
  user:
    name: "{{ haproxy_username }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ haproxy_dir }}"
  tags:
    - haproxy_user

- name: copy certbot haproxy script
  copy:
    src: files/certbot-haproxy.sh
    dest: /usr/local/bin/certbot-haproxy.sh
    mode: 0755
  tags:
    - certbot
    - scripts

- name: lua code block
  block:

    - name: remove existing lua dir
      file:
        path: "{{ lua_dir }}"
        state: absent
      when:
        - remove_lua_dir is defined
        - remove_lua_dir|bool

    # Re-download lua?
    - name: stat lua dir
      stat:
        path: "{{ lua_dir }}"
      register: lua_dir_stat

    - name: check current lua version
      shell: "/opt/lua/src/lua -v | awk {'print $2'}"
      register: current_lua_version
      ignore_errors: yes
      changed_when: false
      when: lua_dir_stat.stat.exists == True

    - name: default no upgrade for lua
      set_fact:
        upgrade_lua: False

    - name: compare current lua to configured playbook variable version
      set_fact:
        upgrade_lua: '{{ True if current_lua_version.stdout is version(lua_version, "<") else False }}'
      when:
        - lua_dir_stat.stat.exists == True
        - current_lua_version is defined

    - name: remove existing lua dir
      file:
        path: "{{ lua_dir }}"
        state: absent
      when: upgrade_lua|bool

    - name: download and unarchive lua
      unarchive:
        src: "https://www.lua.org/ftp/lua-{{ lua_version }}.tar.gz"
        dest: /tmp
        remote_src: True
      when: not lua_dir_stat.stat.exists or upgrade_lua|bool
      register: lua_downloaded

    - name: move temporary extracted lua directory to its dir
      shell: "mv /tmp/lua-{{ lua_version }} {{ lua_dir }}"
      when:
        - lua_downloaded is defined
        - lua_downloaded.changed

    - name: make lua install
      shell: "cd {{ lua_dir }} && make linux && make install"
      when:
        - lua_downloaded is defined
        - lua_downloaded.changed

  tags:
    - lua_install

- name: haproxy code block
  block:

    - name: remove existing haproxy dir
      file:
        path: "{{ haproxy_dir }}"
        state: absent
      when:
        - remove_haproxy_dir is defined
        - remove_haproxy_dir|bool

    # Re-download haproxy?
    - name: stat haproxy dir
      stat:
        path: "{{ haproxy_dir }}"
      register: haproxy_dir_stat

    - name: check current haproxy version
      shell: "/usr/local/sbin/haproxy -v | head -1 | awk {'print $3'} | cut -d- -f1"
      register: current_haproxy_version
      ignore_errors: yes
      changed_when: false
      when: haproxy_dir_stat.stat.exists == True

    - name: default no upgrade for haproxy
      set_fact:
        upgrade_haproxy: False

    - name: compare current haproxy version to configured playbook variable version
      set_fact:
        upgrade_haproxy: '{{ True if current_haproxy_version.stdout is version(haproxy_base_version|string + "." + haproxy_min_version|string, "<") else False }}'
      when:
        - haproxy_dir_stat.stat.exists == True
        - current_haproxy_version is defined

    - name: remove existing haproxy dir
      file:
        path: "{{ haproxy_dir }}"
        state: absent
      when: upgrade_haproxy|bool

    - name: download and unarchive haproxy release
      unarchive:
        src: "http://www.haproxy.org/download/{{ haproxy_base_version }}/src/haproxy-{{ haproxy_base_version }}.{{ haproxy_min_version }}.tar.gz"
        dest: /tmp
        remote_src: True
      when: not haproxy_dir_stat.stat.exists or upgrade_haproxy|bool
      register: haproxy_downloaded

    - name: move temporary extracted haproxy directory to its dir
      shell: "mv /tmp/haproxy-{{ haproxy_base_version }}.{{ haproxy_min_version }} {{ haproxy_dir }}"
      when:
        - haproxy_downloaded is defined
        - haproxy_downloaded.changed

    - name: ensure haproxy dir ownership and permissions
      file:
        path: "{{ haproxy_dir }}"
        state: directory
        mode: 0750
        owner: root
        group: "{{ haproxy_username }}"

    - name: make haproxy compile and install
      shell: "cd {{ haproxy_dir }} && make clean && make TARGET=linux-glibc CPU=generic USE_PCRE=1 USE_LIBCRYPT=1 USE_LINUX_SPLICE=1 USE_LINUX_TPROXY=1 USE_OPENSSL=1 USE_ZLIB=1 USE_LUA=1 LUA_LIB=/usr/local/lib LUA_INC=/usr/local/include LDFLAGS=-ldl EXTRA_OBJS=\"contrib/prometheus-exporter/service-prometheus.o\" && make install"
      when:
        - haproxy_downloaded is defined
        - haproxy_downloaded.changed
      notify:
        - restart haproxy

  tags:
    - haproxy_install
