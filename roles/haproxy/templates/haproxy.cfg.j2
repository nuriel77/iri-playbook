global
    log /dev/log local0 debug alert
    tune.ssl.default-dh-param 2048
    ssl-server-verify none
{% if haproxy_https is defined and haproxy_https|bool == True %}
    ssl-default-bind-options {{ haproxy_default_bind_options }}
    ssl-default-bind-ciphers {{ haproxy_default_bind_ciphers }}
{% endif %}
{% if haproxy_admin_socket is defined %}
    stats socket {{ haproxy_admin_socket }} mode 666 level admin
{% endif %}
{% if haproxy_admin_address is defined %}
    stats socket ipv4@{{ haproxy_admin_address }} level admin
{% endif %}
    stats timeout 2m

defaults
    http-reuse safe
    log global
    option dontlognull
    option forwardfor
    option http-server-close
    retries 3
    timeout connect 10s
    timeout client 10s
    timeout queue 10s
    timeout server 300s
    timeout http-request 10s
    maxconn {{ lb_max_connections }}
    default-server inter 10s fastinter 2s downinter 30s

    log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %rc\ %hr\ %hs\ %rt\ %{+Q}r\ %sslc\ %sslv\ body:%[capture.req.hdr(0)]

    stats hide-version

# Can be used for various authentications
# in case user wants to add more backends
userlist lb_auth
    user {{ fullnode_user }} password {{ fullnode_user_password | password_hash('sha512') }}


frontend iri_front
    mode http
    capture request header User-Agent len 128
    option forwardfor
    maxconn {{ iri_api_max_connections }}
    timeout client 5m
    timeout client-fin 5m
    timeout http-request 10s
    option log-separate-errors
    option http-buffer-request
{% if haproxy_https is defined and haproxy_https|bool == True %}
{% for header in haproxy_https_response_headers %}
    http-response set-header {{ header }}
{% endfor %}
{% endif %}

{% if haproxy_use_whitelist_file is defined and haproxy_use_whitelist_file|bool == True and haproxy_whitelist_file is defined  %}
    acl whitelist src -f {{ haproxy_whitelist_file }}
{% else %}
    acl whitelist src {{ haproxy_whitelist | join(" ") }}
{% endif %}

    # id=0 to store body for logging
    declare capture request len {{ haproxy_request_capture_length | default('80000') }}
    http-request capture req.body id 0

    # disable client with no TCP body/request length
    tcp-request inspect-delay 30s
    acl content_present req_len gt 0
    tcp-request content accept if content_present

    # Enable tracking of counters for ip in the default stick-table
    tcp-request content track-sc0 src

    stick-table type ip size 1m expire 5m store gpc0,http_req_rate(5s),http_req_cnt,conn_cnt,sess_cnt

    acl source_is_abuser src_get_gpc0(iri_front) gt 0
    tcp-request connection reject if source_is_abuser
    tcp-request connection track-sc1 src if !source_is_abuser

    # drop connections from user with more then 1000 requests in 5m
    acl source_is_hacker src_http_req_cnt(iri_front) gt 1000
    tcp-request content reject if source_is_hacker !whitelist

    # limit OPTIONS method because this is only used on browsers
    acl options_method method OPTIONS

    # check IRI/IOTA header if present all is fine else redirect or kick
    acl api_header req.hdr(X-IOTA-API-Version) -m found
    http-request deny if !api_header !options_method

{% if iri_remote_auth is defined and iri_remote_auth %}
    # Lock with password
    acl lb_allow http_auth(lb_auth)
    http-request allow if lb_allow
    http-request deny
{% endif %}

    # Check denied commands
    acl command_exists req.body -m sub -i command
    acl invalid_command req.body -m reg "${REMOTE_LIMIT_API}"
    acl bad_command req.body -m reg {{ haproxy_bad_command }}
    http-request deny if bad_command
    http-request deny if !command_exists !options_method
    http-request deny if invalid_command !whitelist

    {% if iotacaddy_enabled is not defined or iotacaddy_enabled|bool == False %}#{% endif %}acl wants_pow req.body -m reg attachToTangle

    # Enable these two lines for SSL to IRI
    {% if haproxy_https is not defined or haproxy_https|bool == False %}#{% endif %}http-request add-header X-Forwarded-Proto https
{% for lb_bind_address in lb_bind_addresses %}
    {% if haproxy_https is not defined or haproxy_https|bool == False %}#{% endif %}bind {{ lb_bind_address }}:{{ iri_api_port_remote }} tfo alpn h2,http/1.1 ssl crt {{ ssl_certkey_file }}
{% endfor %}
    # Disable this line and use line above for SSL
{% for lb_bind_address in lb_bind_addresses %}
    {% if haproxy_https is defined and haproxy_https|bool == True %}#{% endif %}bind {{ lb_bind_address }}:{{ iri_api_port_remote }} tfo alpn h2,http/1.1
{% endfor %}
    {% if iotacaddy_enabled is not defined or iotacaddy_enabled|bool == False %}#{% endif %}use_backend iri_pow_back if wants_pow
    use_backend iri_back

backend iri_back
    mode http
    fullconn {{ iri_api_max_connections }}
    option redispatch
    timeout server 5m
    timeout server-fin 5m
    filter compression

{% if haproxy_use_whitelist_file is defined and haproxy_use_whitelist_file|bool == True and haproxy_whitelist_file is defined  %}
    acl whitelist src -f {{ haproxy_whitelist_file }}
{% else %}
    acl whitelist src {{ haproxy_whitelist | join(" ") }}
{% endif %}

    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt {{ haproxy_sc2_conn_rate | default('250') }}
    acl http_rate_abuse  sc2_http_req_rate gt {{ haproxy_sc2_http_req_rate | default('400') }}
    acl conn_cur_abuse  sc2_conn_cur gt {{ haproxy_sc2_conn_cur | default('20') }}

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if http_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if conn_cur_abuse mark_as_abuser !whitelist

    #acl is_bad lua.check_post -m str somebadstring
    #http-request deny if is_bad

    balance source

    compression algo gzip
    compression type application/json text/html text/plain text/xml text/json text/css text/javascript application/javascript

    option log-health-checks
    option httpchk POST /
    retry-on all-retryable-errors
    http-request disable-l7-retry if METH_POST
    http-check expect status 400
    default-server inter 10s fall 4 rise 2
    server iri 127.0.0.1:{{ iri_mgmt_api_port if iri_net_name is defined else iri_api_port }} maxconn {{ iri_api_max_connections }} check tfo alpn h2,http/1.1

{% if iotacaddy_enabled is defined and iotacaddy_enabled|bool == True %}
backend iri_pow_back
    mode http
    fullconn {{ iri_api_max_connections }}
    option redispatch
    timeout server 5m
    timeout server-fin 5m
    filter compression

{% if haproxy_use_whitelist_file is defined and haproxy_use_whitelist_file|bool == True and haproxy_whitelist_file is defined  %}
    acl whitelist src -f {{ haproxy_whitelist_file }}
{% else %}
    acl whitelist src {{ haproxy_whitelist | join(" ") }}
{% endif %}

    stick-table type ip size 200k expire 30s store conn_rate(3s),http_req_rate(10s),conn_cur,sess_rate(3s)

    # dynamic stuff for frontend + raise gpc0 counter
    tcp-request content  track-sc2 src
    acl conn_rate_abuse  sc2_conn_rate gt {{ haproxy_sc2_conn_rate | default('250') }}
    acl http_rate_abuse  sc2_http_req_rate gt {{ haproxy_sc2_http_req_rate | default('400') }}
    acl conn_cur_abuse  sc2_conn_cur gt {{ haproxy_sc2_conn_cur | default('20') }}

    # abuser marking
    acl mark_as_abuser   sc1_inc_gpc0 gt 0
    tcp-request content  reject if conn_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if http_rate_abuse mark_as_abuser !whitelist
    tcp-request content  reject if conn_cur_abuse mark_as_abuser !whitelist

    #acl is_bad lua.check_post -m str somebadstring
    #http-request deny if is_bad

    compression algo gzip
    compression type application/json text/html text/plain text/xml text/json text/css text/javascript application/javascript

    # Match iotacaddy's expected host header
    http-request set-header Host {{ iotacaddy_listen_address }}

    option log-health-checks
    option httpchk POST /health HTTP/1.1\r\nHost:\ {{ iotacaddy_listen_address }}\r\nX-IOTA-API-VERSION:\ 1\r\nContent-Type:\ application/json\r\n\r\n{\"command\":\"attachToTangle\"}
    retry-on all-retryable-errors
    http-request disable-l7-retry if METH_POST
    http-check expect status 400
    default-server inter 2s fall 2 rise 2
    server iotacaddy 127.0.0.1:{{ iotacaddy_listen_port }} maxconn {{ max_concurrent_pow_requests }} check tfo alpn h2,http/1.1
    # If iotacaddy is down, send to IRI as backup
    server iri 127.0.0.1:{{ iri_mgmt_api_port if iri_net_name is defined else iri_api_port }} maxconn {{ max_concurrent_pow_requests }} check backup tfo alpn h2,http/1.1
{% endif %}

listen stats
    bind {{ haproxy_stats_address }}:{{ haproxy_stats_port }} ssl crt {{ ssl_certkey_file }}
    http-request add-header X-Forwarded-Proto https
    mode http
    timeout client 1h
    stats enable
    stats refresh 5s
    stats hide-version
    stats uri /
    http-request use-service prometheus-exporter if { path /metrics }

    # Lock with password
    acl lb_allow http_auth(lb_auth)
    http-request auth realm UserAuth if !lb_allow
