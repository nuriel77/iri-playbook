- name: set variables centos
  set_fact:
    config_dir: /etc/sysconfig
  tags: always
  when: ansible_distribution == 'CentOS'

- name: set variables debian/ubuntu
  set_fact:
    config_dir: /etc/default
  tags: always
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# If running a cluster of Consul, use default interface's IP
- name: set interface ip
  set_fact:
    consul_bind_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  when: groups['fullnode'] | length > 1
  tags:
    - consul_get_ip
 
# If running on a single machine, use localhost
# This can be overriden via setting variables
# in the variables file or commandline
- name: set local ip
  set_fact:
    consul_bind_ip: 127.0.0.1
  when: groups['fullnode'] | length == 1
  tags:
    - consul_get_ip

# For interface advertise make sure we use the
# interface of the default route if ansible default
# interface detection failed.
#- name: set advertise address
#  shell: "ip -4 a show $(ip r | grep default | sed 's|^.*dev \\(.*\\) proto.*$|\\1|') | grep 'inet' | head -1 | awk '{print $2}' | cut -d/ -f1"
#  register: consul_advertise_address
#  changed_when: false

- name: Create user consul
  user:
    name: "{{ consul_username }}"
    shell: /sbin/nologin
    createhome: no
    home: "{{ consul_data_dir }}"
  tags:
    - consul_user

- name: get consul user uid
  shell: "echo -n $(id -u {{ consul_username }})"
  changed_when: false
  register: consul_uid

- name: copy scripts
  copy:
    src: "files/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: 0755
  with_items:
    - node_check.sh
  tags:
    - scripts

- name: Ensure consul directories exist
  file:
    state: directory
    mode: 0700
    dest: "{{ item }}"
    owner: "{{ consul_username }}"
    group: "{{ consul_username }}"
  with_items:
    - "{{ consul_config_dir }}"
    - "{{ consul_config_dir }}/certs.d"
    - "{{ consul_config_dir }}/conf.d"
    - "{{ consul_data_dir }}"

- import_tasks: image-consul.yml
  tags:
    - consul_docker_image

- name: copy consul sysconfig file
  template:
    src: templates/consul.sysconfig.j2
    dest: "{{ config_dir }}/consul"
  notify:
    - restart consul

- name: copy consul systemd file
  template:
    src: templates/consul.service.j2
    dest: /etc/systemd/system/consul.service
  notify:
    - restart consul

- name: check consul key exists
  run_once: yes
  stat:
    path: "{{ consul_config_dir }}/{{ consul_key_file }}"
  register: consul_key
  tags:
    - consul_tokens

- name: create a new encryption key
  run_once: yes
  shell: "/usr/bin/docker run --name tempconsul --rm {{ consul_image }}:{{ consul_tag }} consul keygen > {{ consul_config_dir }}/{{ consul_key_file }}"
  no_log: yes
  when: not consul_key.stat.exists
  tags:
    - consul_tokens

- name: ensure key file mode
  run_once: yes
  file:
    path: "{{ consul_config_dir }}/{{ consul_key_file }}"
    owner: "{{ consul_username }}"
    group: "{{ consul_username }}"
    mode: 0400
  tags:
    - consul_tokens

- name: slurp key
  run_once: yes
  shell: "echo -n $(cat {{ consul_config_dir }}/{{ consul_key_file }})"
  register: consul_key_data
  changed_when: false
  no_log: yes
  tags:
    - consul_tokens

- name: check master token file exists
  run_once: yes
  stat:
    path: "{{ consul_config_dir }}/{{ consul_master_token_file }}"
  register: consul_token
  tags:
    - consul_tokens

- name: create a new master token
  run_once: yes
  shell: "uuidgen > {{ consul_config_dir }}/{{ consul_master_token_file }}"
  no_log: yes
  when: consul_token.stat.exists == False
  tags:
    - consul_tokens

- name: ensure master token file mode
  run_once: yes
  file:
    path: "{{ consul_config_dir }}/{{ consul_master_token_file }}"
    owner: "{{ consul_username }}"
    group: "{{ consul_username }}"
    mode: 0400
  tags:
    - consul_tokens

- name: slurp master token
  run_once: yes
  shell: "echo -n $(cat {{ consul_config_dir }}/{{ consul_master_token_file }})"
  register: consul_master_token
  no_log: yes
  changed_when: false
  tags:
    - consul_tokens

- name: copy consul configuration files
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ consul_config_dir }}/conf.d/{{ item }}"
    owner: "{{ consul_username }}"
    group: "{{ consul_username }}"
    mode: 0644
  with_items:
    - main.json
  notify: restart consul
  tags:
    - consul_tokens

- name: flush handlers
  meta: flush_handlers

- name: ensure consul started and enabled
  systemd:
    name: consul.service
    state: started
    enabled: true
